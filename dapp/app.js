var web3 = new Web3();
var accountaddress;
var ballotContract;
var ballotByteCode;
var Ballot;
var ballotABI = [
	{
		"inputs": [
			{
				"internalType": "bytes32[]",
				"name": "proposalNames",
				"type": "bytes32[]"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "address",
				"name": "Voter",
				"type": "address"
			}
		],
		"name": "voteDone",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [],
		"name": "voteEnded",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [],
		"name": "voteStarted",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "address",
				"name": "voter",
				"type": "address"
			}
		],
		"name": "voterAdded",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "ballotOfficialAddress",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "ballotOfficialName",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "chairperson",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "endVote",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "voter",
				"type": "address"
			}
		],
		"name": "giveRightToVote",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "proposal",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "proposals",
		"outputs": [
			{
				"internalType": "bytes32",
				"name": "name",
				"type": "bytes32"
			},
			{
				"internalType": "uint256",
				"name": "voteCount",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "startVote",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "state",
		"outputs": [
			{
				"internalType": "enum Ballot.State",
				"name": "",
				"type": "uint8"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalCandidate",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalVote",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalVoter",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "proposal",
				"type": "uint256"
			}
		],
		"name": "vote",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "voters",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "weight",
				"type": "uint256"
			},
			{
				"internalType": "bool",
				"name": "voted",
				"type": "bool"
			},
			{
				"internalType": "uint256",
				"name": "vote",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "winnerName",
		"outputs": [
			{
				"internalType": "bytes32",
				"name": "winnerName_",
				"type": "bytes32"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "winningProposal",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "winningProposal_",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];
var voterTable;

$( document ).ready(function() {
    $('#kaleidorefresh').hide();
    $('#panels_contract').hide();
    $('#panels_voters').hide();

       voterTable = $('#voterTable').DataTable( {
        columns: [
            { title: "Address" },
            { title: "Name" },
            { title: "Status" }
        ]
    } );
});

window.addEventListener('load', async () => {

    // Modern dapp browsers...
    if (window.ethereum) {
        window.web3 = new Web3(ethereum);
        try {
            // Request account access if needed
            await ethereum.enable();
            // Acccounts now exposed
            accountaddress = web3.givenProvider.selectedAddress;
            //show account address
            $('#account').html(accountaddress)
            
            ballotContract = new web3.eth.Contract(ballotABI);
            ballotByteCode = '0x608060405260008055600060015560006002553480156200001f57600080fd5b50604051620018453803806200184583398181016040528101906200004591906200028a565b33600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160076000600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550805160008190555060005b81518110156200018f576008604051806040016040528084848151811062000128576200012762000429565b5b602002602001015181526020016000815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050808062000186906200037d565b915050620000fb565b506000600660006101000a81548160ff02191690836002811115620001b957620001b8620003fa565b5b021790555050620004c6565b6000620001dc620001d68462000304565b620002db565b905080838252602082019050828560208602820111156200020257620002016200048c565b5b60005b858110156200023657816200021b888262000273565b84526020840193506020830192505060018101905062000205565b5050509392505050565b600082601f83011262000258576200025762000487565b5b81516200026a848260208601620001c5565b91505092915050565b6000815190506200028481620004ac565b92915050565b600060208284031215620002a357620002a262000496565b5b600082015167ffffffffffffffff811115620002c457620002c362000491565b5b620002d28482850162000240565b91505092915050565b6000620002e7620002fa565b9050620002f5828262000347565b919050565b6000604051905090565b600067ffffffffffffffff82111562000322576200032162000458565b5b602082029050602081019050919050565b6000819050919050565b6000819050919050565b62000352826200049b565b810181811067ffffffffffffffff8211171562000374576200037362000458565b5b80604052505050565b60006200038a826200033d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620003c057620003bf620003cb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b620004b78162000333565b8114620004c357600080fd5b50565b61136f80620004d66000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639094974711610097578063c19d93fb11610066578063c19d93fb14610268578063de975d1814610286578063e2ba53f0146102a4578063f1cea4c7146102c257610100565b806390949747146101f25780639e7b8d6114610210578063a3ec138d1461022c578063b92239461461025e57610100565b80634c0a6af0116100d35780634c0a6af01461018e578063609ff1bd146101985780636332abc9146101b6578063753ec103146101d457610100565b80630121b93f14610105578063013cf08b146101215780631812dab4146101525780632e4176cf14610170575b600080fd5b61011f600480360381019061011a9190610cad565b6102e0565b005b61013b60048036038101906101369190610cad565b6104b8565b604051610149929190610e43565b60405180910390f35b61015a6104ec565b6040516101679190610f49565b60405180910390f35b6101786104f2565b6040516101859190610e0d565b60405180910390f35b610196610518565b005b6101a0610643565b6040516101ad9190610f49565b60405180910390f35b6101be610709565b6040516101cb9190610f49565b60405180910390f35b6101dc61070f565b6040516101e99190610e87565b60405180910390f35b6101fa61079d565b6040516102079190610e0d565b60405180910390f35b61022a60048036038101906102259190610c80565b6107c3565b005b61024660048036038101906102419190610c80565b6109d7565b60405161025593929190610f64565b60405180910390f35b610266610a0e565b005b610270610b39565b60405161027d9190610e6c565b60405180910390f35b61028e610b4c565b60405161029b9190610e87565b60405180910390f35b6102ac610bda565b6040516102b99190610e28565b60405180910390f35b6102ca610c50565b6040516102d79190610f49565b60405180910390f35b60018060028111156102f5576102f4611161565b5b600660009054906101000a900460ff16600281111561031757610316611161565b5b1461032157600080fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414156103ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a390610ea9565b60405180910390fd5b8060010160009054906101000a900460ff16156103fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f590610ec9565b60405180910390fd5b60018160010160006101000a81548160ff02191690831515021790555082816002018190555060026000815480929190610437906110e9565b9190505550806000015460088481548110610455576104546111bf565b5b906000526020600020906002020160010160008282546104759190610fb7565b925050819055507f55c65cf9526efdf6c2252fe9757889dbd93e10172cad0f2edb1df619c88dbf7d336040516104ab9190610e0d565b60405180910390a1505050565b600881815481106104c857600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b60005481565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600281111561052d5761052c611161565b5b600660009054906101000a900460ff16600281111561054f5761054e611161565b5b1461055957600080fd5b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e090610f29565b60405180910390fd5b6001600660006101000a81548160ff0219169083600281111561060f5761060e611161565b5b02179055507fd0dc01800a369fef30d3fced5275b8b916549867622e79efca5245c479fda4ea60405160405180910390a150565b6000600280600281111561065a57610659611161565b5b600660009054906101000a900460ff16600281111561067c5761067b611161565b5b1461068657600080fd5b6000805b6008805490508110156107035781600882815481106106ac576106ab6111bf565b5b90600052602060002090600202016001015411156106f057600881815481106106d8576106d76111bf565b5b90600052602060002090600202016001015491508093505b80806106fb906110e9565b91505061068a565b50505090565b60015481565b6005805461071c906110b7565b80601f0160208091040260200160405190810160405280929190818152602001828054610748906110b7565b80156107955780601f1061076a57610100808354040283529160200191610795565b820191906000526020600020905b81548152906001019060200180831161077857829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060028111156107d8576107d7611161565b5b600660009054906101000a900460ff1660028111156107fa576107f9611161565b5b1461080457600080fd5b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088b90610ee9565b60405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1615610924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091b90610f09565b60405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541461097357600080fd5b6001600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550600160008154809291906109ce906110e9565b91905055505050565b60076020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060020154905083565b6001806002811115610a2357610a22611161565b5b600660009054906101000a900460ff166002811115610a4557610a44611161565b5b14610a4f57600080fd5b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610adf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad690610f29565b60405180910390fd5b6002600660006101000a81548160ff02191690836002811115610b0557610b04611161565b5b02179055507f0deeca6c5a4a24936ed5053feb119562545a36119b158ecd0bb902a689be2d6660405160405180910390a150565b600660009054906101000a900460ff1681565b60048054610b59906110b7565b80601f0160208091040260200160405190810160405280929190818152602001828054610b85906110b7565b8015610bd25780601f10610ba757610100808354040283529160200191610bd2565b820191906000526020600020905b815481529060010190602001808311610bb557829003601f168201915b505050505081565b60006002806002811115610bf157610bf0611161565b5b600660009054906101000a900460ff166002811115610c1357610c12611161565b5b14610c1d57600080fd5b6008610c27610643565b81548110610c3857610c376111bf565b5b90600052602060002090600202016000015491505090565b60025481565b600081359050610c658161130b565b92915050565b600081359050610c7a81611322565b92915050565b600060208284031215610c9657610c956111ee565b5b6000610ca484828501610c56565b91505092915050565b600060208284031215610cc357610cc26111ee565b5b6000610cd184828501610c6b565b91505092915050565b610ce38161100d565b82525050565b610cf28161101f565b82525050565b610d018161102b565b82525050565b610d1081611072565b82525050565b6000610d2182610f9b565b610d2b8185610fa6565b9350610d3b818560208601611084565b610d44816111f3565b840191505092915050565b6000610d5c601483610fa6565b9150610d6782611204565b602082019050919050565b6000610d7f600e83610fa6565b9150610d8a8261122d565b602082019050919050565b6000610da2602883610fa6565b9150610dad82611256565b604082019050919050565b6000610dc5601883610fa6565b9150610dd0826112a5565b602082019050919050565b6000610de8602083610fa6565b9150610df3826112ce565b602082019050919050565b610e0781611068565b82525050565b6000602082019050610e226000830184610cda565b92915050565b6000602082019050610e3d6000830184610cf8565b92915050565b6000604082019050610e586000830185610cf8565b610e656020830184610dfe565b9392505050565b6000602082019050610e816000830184610d07565b92915050565b60006020820190508181036000830152610ea18184610d16565b905092915050565b60006020820190508181036000830152610ec281610d4f565b9050919050565b60006020820190508181036000830152610ee281610d72565b9050919050565b60006020820190508181036000830152610f0281610d95565b9050919050565b60006020820190508181036000830152610f2281610db8565b9050919050565b60006020820190508181036000830152610f4281610ddb565b9050919050565b6000602082019050610f5e6000830184610dfe565b92915050565b6000606082019050610f796000830186610dfe565b610f866020830185610ce9565b610f936040830184610dfe565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000610fc282611068565b9150610fcd83611068565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561100257611001611132565b5b828201905092915050565b600061101882611048565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611043826112f7565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061107d82611035565b9050919050565b60005b838110156110a2578082015181840152602081019050611087565b838111156110b1576000848401525b50505050565b600060028204905060018216806110cf57607f821691505b602082108114156110e3576110e2611190565b5b50919050565b60006110f482611068565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561112757611126611132565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f486173206e6f20726967687420746f20766f7465000000000000000000000000600082015250565b7f416c726561647920766f7465642e000000000000000000000000000000000000600082015250565b7f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008201527f746f20766f74652e000000000000000000000000000000000000000000000000602082015250565b7f54686520766f74657220616c726561647920766f7465642e0000000000000000600082015250565b7f4f6e6c79206368616972706572736f6e2063616e20737461727420766f74652e600082015250565b6003811061130857611307611161565b5b50565b6113148161100d565b811461131f57600080fd5b50565b61132b81611068565b811461133657600080fd5b5056fea264697066735822122087d7b77866ffb4cf180dba657b52a7864d96267877c68c48a4ae86de8e0b0ad864736f6c63430008060033';
            //'0x6080604052600080556000600155600060025560006003553480156200002457600080fd5b506040516200113338038062001133833981018060405260408110156200004a57600080fd5b8101908080516401000000008111156200006357600080fd5b828101905060208101848111156200007a57600080fd5b81518560018202830111640100000000821117156200009857600080fd5b50509291906020018051640100000000811115620000b557600080fd5b82810190506020810184811115620000cc57600080fd5b8151856001820283011164010000000082111715620000ea57600080fd5b505092919050505033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600590805190602001906200014b92919062000192565b5080600690805190602001906200016492919062000192565b506000600960006101000a81548160ff021916908360028111156200018557fe5b0217905550505062000241565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d557805160ff191683800117855562000206565b8280016001018555821562000206579182015b8281111562000205578251825591602001919060010190620001e8565b5b50905062000215919062000219565b5090565b6200023e91905b808211156200023a57600081600090555060010162000220565b5090565b90565b610ee280620002516000396000f3fe6080604052600436106100b4576000357c0100000000000000000000000000000000000000000000000000000000900480634c0a6af0146100b95780636332abc9146100d0578063753ec103146100fb57806387caea781461018b57806390949747146101e0578063af15408714610237578063b92239461461030c578063c19d93fb14610323578063d9e95a981461035c578063de975d1814610444578063f1cea4c7146104d4578063f3a8286f146104ff575b600080fd5b3480156100c557600080fd5b506100ce61052a565b005b3480156100dc57600080fd5b506100e561060e565b6040518082815260200191505060405180910390f35b34801561010757600080fd5b50610110610614565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610150578082015181840152602081019050610135565b50505050905090810190601f16801561017d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019757600080fd5b506101c6600480360360208110156101ae57600080fd5b810190808035151590602001909291905050506106b2565b604051808215151515815260200191505060405180910390f35b3480156101ec57600080fd5b506101f561096f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024357600080fd5b506102866004803603602081101561025a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610995565b604051808060200183151515158152602001828103825284818151815260200191508051906020019080838360005b838110156102d05780820151818401526020810190506102b5565b50505050905090810190601f1680156102fd5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561031857600080fd5b50610321610a5e565b005b34801561032f57600080fd5b50610338610b58565b6040518082600281111561034857fe5b60ff16815260200191505060405180910390f35b34801561036857600080fd5b506104426004803603604081101561037f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156103bc57600080fd5b8201836020820111156103ce57600080fd5b803590602001918460018302840111640100000000831117156103f057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610b6b565b005b34801561045057600080fd5b50610459610d19565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561049957808201518184015260208101905061047e565b50505050905090810190601f1680156104c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104e057600080fd5b506104e9610db7565b6040518082815260200191505060405180910390f35b34801561050b57600080fd5b50610514610dbd565b6040518082815260200191505060405180910390f35b600080600281111561053857fe5b600960009054906101000a900460ff16600281111561055357fe5b14151561055f57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105bb57600080fd5b6001600960006101000a81548160ff021916908360028111156105da57fe5b02179055507fd0dc01800a369fef30d3fced5275b8b916549867622e79efca5245c479fda4ea60405160405180910390a150565b60025481565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106aa5780601f1061067f576101008083540402835291602001916106aa565b820191906000526020600020905b81548152906001019060200180831161068d57829003601f168201915b505050505081565b600060018060028111156106c257fe5b600960009054906101000a900460ff1660028111156106dd57fe5b1415156106e957600080fd5b60008090506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805460018160011615610100020316600290049050141580156107a25750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16155b15610902576001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff02191690831515021790555061080a610dc3565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084816020019015159081151581525050841561086a5760008081548092919060010191905055505b8060076000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690831515021790555090505060036000815480929190600101919050555060019150505b7f55c65cf9526efdf6c2252fe9757889dbd93e10172cad0f2edb1df619c88dbf7d33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a18092505050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6008602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a415780601f10610a1657610100808354040283529160200191610a41565b820191906000526020600020905b815481529060010190602001808311610a2457829003601f168201915b5050505050908060010160009054906101000a900460ff16905082565b6001806002811115610a6c57fe5b600960009054906101000a900460ff166002811115610a8757fe5b141515610a9357600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aef57600080fd5b6002600960006101000a81548160ff02191690836002811115610b0e57fe5b02179055506000546001819055507fb43a401dcdbe02a8afa41feb6c651425997908d1a4b79cf505188ba1dd3fd8726001546040518082815260200191505060405180910390a150565b600960009054906101000a900460ff1681565b6000806002811115610b7957fe5b600960009054906101000a900460ff166002811115610b9457fe5b141515610ba057600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bfc57600080fd5b610c04610df5565b828160000181905250600081602001901515908115158152505080600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190610c7a929190610e11565b5060208201518160010160006101000a81548160ff0219169083151502179055509050506002600081548092919060010191905055507fb9e5f9042e6c6eb94817f660cfa81afea9585e59d72bfc3348a2305cbd33e13384604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150505050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610daf5780601f10610d8457610100808354040283529160200191610daf565b820191906000526020600020905b815481529060010190602001808311610d9257829003601f168201915b505050505081565b60035481565b60015481565b6040805190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b6040805190810160405280606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610e5257805160ff1916838001178555610e80565b82800160010185558215610e80579182015b82811115610e7f578251825591602001919060010190610e64565b5b509050610e8d9190610e91565b5090565b610eb391905b80821115610eaf576000816000905550600101610e97565b5090565b9056fea165627a7a72305820f5c9049e763e64ee845c6057f6f7a3e2ef7ea7d733c031532141a0fdb149c2a80029';
            
        } catch (error) {
            // User denied account access...
            window.alert("Please connect to Metamask.")
        }
    }
    // Legacy dapp browsers...
    else if (window.web3) {
            window.web3 = new Web3(web3.currentProvider);
            // Acccounts always exposed
            web3.eth.sendTransaction({/* ... */});
    }
    // Non-dapp browsers...
    else {
            console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
    }
});


var BallotContractAddress = "";
var MyTransactionHash;

function refreshContract(_contractAddress){
    loadBallotContract(_contractAddress);   
    var myBallot = new web3.eth.Contract(ballotABI, _contractAddress);
    var currentState = loadState(myBallot);
    
    if (currentState == 0){
        $('#panels_contract').show();
        $('#panels_voters').show();
        $("#btnStart").show();
        $("#btnEnd").hide();
        $("#loader").hide();
        $("#section_addVoter").show();                
    }
    else if (currentState == 1){
         $("#loaderStartVote").hide();
        $("#btnStart").hide();
        $("#btnEnd").show();
        $("#section_addVoter").hide();              
    }
    else if (currentState == 2){
        $("#loaderStartVote").hide();
        $("#btnEnd").hide();                
    }
    
}

function getContract(){
    web3.eth.getTransactionReceipt(MyTransactionHash)
    .then((receipt) => {
        try{
            if (receipt.contractAddress){
                BallotContractAddress = receipt.contractAddress;
                loadBallotContract(BallotContractAddress);
                console.log(BallotContractAddress);
                $("#contractAddress").val(BallotContractAddress);
                watchVoteStarted(); //start watching for events
                watchVoterAdded(); //start watching for new voters
                watchVoteDone(); //start watching for vote done
                watchVoteEnd(); //start watching for vote end
                $('#panels_contract').show();
                $('#panels_voters').show();
                $("#btnStart").show();
                $("#btnEnd").hide();
                $("#loader").hide();
                $("#section_addVoter").show();
                return;                    
            }                    
        }
        catch(e){
            console.log("nope");
            window.setTimeout(getContract, 1000);  
        }
    }); 
}

//-------------- Watching Section -------------------//

function watchVoteEnd(){
    Ballot.events.voteEnded({
    }, (error, event) => { 
        console.log(event.returnValues.finalResult);
        loadState(Ballot);
        loadFinalResult(Ballot);
        $("#loaderStartVote").hide();
        $("#btnEnd").hide();
    })
    .on('data', (event) => {

    })
    .on('changed', (event) => {
        // remove event from local database
    })
    .on('error', console.error)                      
}

function watchVoteDone(){
    Ballot.events.voteDone({
    }, (error, event) => { 
        console.log(event.returnValues.voter);
        updateNewVote(event.returnValues.voter);    
    })
    .on('data', (event) => {

    })
    .on('changed', (event) => {
        // remove event from local database
    })
    .on('error', console.error)           
}

var lastVoteAdded="";
function watchVoterAdded(){
    Ballot.events.voterAdded({
    }, (error, event) => { 
        console.log(event.returnValues.voter);
        loadTotalVoter(Ballot);
        
        //strange hack: this event fires twice for some reasons
        //so I save the last voter address and suppress it if
        //it is the same as the previous one :P
        if (lastVoteAdded != event.returnValues.voter){
            loadVoter(Ballot, event.returnValues.voter);
            lastVoteAdded = event.returnValues.voter;                    
        }

        $("#loaderNewVoter").hide();                
    })
    .on('data', (event) => {

    })
    .on('changed', (event) => {
        // remove event from local database
    })
    .on('error', console.error)
}

function watchVoteStarted(){
    Ballot.events.voteStarted({
    }, (error, event) => { })
    .on('data', (event) => {
        console.log(event.event); // same results as the optional callback above
        $("#loaderStartVote").hide();
        $("#btnStart").hide();
        $("#btnEnd").show();
        $("#section_addVoter").hide();
        loadState(Ballot);
    })
    .on('changed', (event) => {
        // remove event from local database
    })
    .on('error', console.error)
}

//-------------- Loading Section -------------------//

async function loadBallotContract(myBallotContractAddress){
    Ballot = new web3.eth.Contract(ballotABI, myBallotContractAddress);
    Ballot.methods.ballotOfficialName().call().then((result) => {
        $("#lbl_officialname").html("<b>Ballot Official Name: </b>" + result);
    });
    Ballot.methods.proposal().call().then((result) => {
        $("#lbl_proposal").html("<b>Proposal: </b>" + result);
    });
    
    loadFinalResult(Ballot);
    loadTotalVoter(Ballot);
    loadTotalVotes(Ballot);

    loadState(Ballot);
    
    $("#lbl_address").html("<b>Address: </b>" + myBallotContractAddress);           
};

async function loadFinalResult(myBallot){
    myBallot.methods.finalResult().call().then((result) => {
        $("#lbl_result").html("<b>Result: </b>" + result);
    });
}

async function loadTotalVoter(myBallot){
    myBallot.methods.totalVoter().call().then((result) => {
        $("#lbl_voters_num").html("<b>Voters: </b>" + result);
    });
}

async function loadTotalVotes(myBallot){
    myBallot.methods.totalVote().call().then((result) => {
        $("#lbl_votes_num").html("<b>Votes: </b>" + result);
    });   
}

async function loadState(myBallot){
    myBallot.methods.state().call().then((result) => {
        if (result == 0){
            $("#lbl_state").addClass("label label-primary");
            $("#lbl_state").html("Created");                    
        }
        else if (result == 1){
            $("#lbl_state").addClass("label label-success");
            $("#lbl_state").html("Voting");                    
        }                
        else if (result == 2){
            $("#lbl_state").addClass("label label-danger");
            $("#lbl_state").html("Ended");                    
        } 
        return result;
    });
}

async function loadVoter(myBallot, _myVoterAddress){
    myBallot.methods.voterRegister(_myVoterAddress).call().then((result) => {
        console.log(result);
        
        var voteStatus;
        if (result.voted){
            voteStatus = "<span class='label label-primary'>Voted</span>";
        }
        else {
            voteStatus = "<span class='label label-danger'>Not Voted</span>";
        }
        
        var newRow = voterTable.row.add( [
            _myVoterAddress,
            result.voterName,
            voteStatus
        ] ).draw(false).node();
        $('td:eq(2)', newRow).attr('id', _myVoterAddress+"_cell");
        
    } );

}

function updateNewVote(_myVoterAddress){
    $("#" + _myVoterAddress+"_cell").html("<span class='label label-primary'>Voted</span>");  
    loadTotalVotes(Ballot);
}

//-------------- Button Section -------------------//

$("#btnEnd").click(async function(){
    $("#loaderStartVote").show();
    //Ballot = new web3.eth.Contract(ballotABI, BallotContractAddress);
    
    var mygas;
    Ballot.methods.endVote().estimateGas({from: accountaddress})
    .then(function(gasAmount){
        mygas = gasAmount;
    })
    
    Ballot.methods.endVote().send({
        from: accountaddress,
        gas: mygas, 
        gasPrice: web3.eth.gasPrice        	    
    })
    .on('transactionHash', (hash) => {
        console.log("a");
    })
    .on('receipt', (receipt) => {
        console.log("b");            
        
    })
    .on('confirmation', (confirmationNumber, receipt) => {
        console.log("c");
    })
    .on('error', console.error);            
});

$("#btnStart").click(async function() {	
    $("#loaderStartVote").show();
    //Ballot = new web3.eth.Contract(ballotABI, BallotContractAddress);
    
    var mygas;
    Ballot.methods.startVote().estimateGas({from: accountaddress})
    .then(function(gasAmount){
        mygas = gasAmount;
    })
    
    Ballot.methods.startVote().send({
        from: accountaddress,
        gas: mygas, 
        gasPrice: web3.eth.gasPrice        	    
    })
    .on('transactionHash', (hash) => {
        console.log("a");
    })
    .on('receipt', (receipt) => {
        console.log("b");            
        
    })
    .on('confirmation', (confirmationNumber, receipt) => {
        console.log("c");
    })
    .on('error', console.error);
});

$("#btnAdd").click(async function() {	
    $("#loaderNewVoter").show();
    console.log($("#txtNewVoterAddress").val());
    console.log($("#txtNewVoterName").val());
    
    //Ballot = new web3.eth.Contract(ballotABI, BallotContractAddress);
    
    //estimate first
    var mygas;
    Ballot.methods.addVoter($("#txtNewVoterAddress").val(), $("#txtNewVoterName").val()).estimateGas({from: accountaddress})
    .then(function(gasAmount){
        mygas = gasAmount;
    })
    
    Ballot.methods.addVoter($("#txtNewVoterAddress").val(), $("#txtNewVoterName").val()).send({
        from: accountaddress,
        gas: mygas, 
        gasPrice: web3.eth.gasPrice       	    
    })
    .on('transactionHash', (hash) => {
        console.log("a");
    })
    .on('receipt', (receipt) => {
        console.log("b");            
        
    })
    .on('confirmation', (confirmationNumber, receipt) => {
        console.log("c");
    })
    .on('error', console.error);
    
});

$("#btnRefresh").click(async function(){
   refreshContract($("#contractAddress").val()); 
});

$("#btnGo").click(async function() {	
    $("#loader").show();
    var i = 0;
    var _ballotOfficialName = $("#official").val();
    var _proposal = $("#proposal").val();
    
    ballotContract.deploy({
        data: ballotByteCode,
        arguments: [["0x63616e6469646174653100000000000000000000000000000000000000000000","0x6332000000000000000000000000000000000000000000000000000000000000","0x6333000000000000000000000000000000000000000000000000000000000000"]],
    })
    .send({
        from: accountaddress,
        gas: 1308700, 
        gasPrice: web3.eth.gasPrice,
        gasLimit: 2000000
    }, (error, transactionHash) => {
        MyTransactionHash = transactionHash;
        //getContract(); for private kaleido chain only
    })
    .on('error', (error) => { 
        console.log("b");            
    })
    .on('transactionHash', (transactionHash) => { 
        console.log("c");
    })
    .on('receipt', (receipt) => {
        console.log("DONE" + receipt.contractAddress); // contains the new contract address
        
        BallotContractAddress = receipt.contractAddress;
        loadBallotContract(BallotContractAddress);
        console.log(BallotContractAddress);
        $("#contractAddress").val(BallotContractAddress);
        watchVoteStarted(); //start watching for events
        watchVoterAdded(); //start watching for new voters
        watchVoteDone(); //start watching for vote done
        watchVoteEnd(); //start watching for vote end
        $('#panels_contract').show();
        $('#panels_voters').show();
        $("#btnStart").show();
        $("#btnEnd").hide();
        $("#loader").hide();
        $("#section_addVoter").show();
    })
    .on('confirmation', (confirmationNumber, receipt) => { 
        console.log(i);
        i++;
    })
    .then((newContractInstance) => {
        console.log(newContractInstance.options.address) // instance with the new contract address
    });
                
});