var web3 = new Web3();
var accountaddress;
var ballotContract;
var ballotByteCode;
var Ballot;
var ballotABI = [
	{
		"inputs": [],
		"name": "endVote",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "voter",
				"type": "address"
			}
		],
		"name": "giveRightToVote",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "startVote",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "bytes32[]",
				"name": "proposalNames",
				"type": "bytes32[]"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "proposal",
				"type": "uint256"
			}
		],
		"name": "vote",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "address",
				"name": "Voter",
				"type": "address"
			}
		],
		"name": "voteDone",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [],
		"name": "voteEnded",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [],
		"name": "voteStarted",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "address",
				"name": "voter",
				"type": "address"
			}
		],
		"name": "voterAdded",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "chairperson",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "proposals",
		"outputs": [
			{
				"internalType": "bytes32",
				"name": "name",
				"type": "bytes32"
			},
			{
				"internalType": "uint256",
				"name": "voteCount",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "state",
		"outputs": [
			{
				"internalType": "enum Ballot.State",
				"name": "",
				"type": "uint8"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalCandidate",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalVote",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalVoter",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "voters",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "weight",
				"type": "uint256"
			},
			{
				"internalType": "bool",
				"name": "voted",
				"type": "bool"
			},
			{
				"internalType": "uint256",
				"name": "vote",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "winnerName",
		"outputs": [
			{
				"internalType": "bytes32",
				"name": "winnerName_",
				"type": "bytes32"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "winningProposal",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "winningProposal_",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];
var voterTable;

$( document ).ready(function() {
    $('#panels_contract').hide();
});

window.addEventListener('load', async () => {

    // Modern dapp browsers...
    if (window.ethereum) {
        window.web3 = new Web3(ethereum);
        try {
            // Request account access if needed
            await ethereum.enable();
            // Acccounts now exposed
            accountaddress = web3.givenProvider.selectedAddress;
            console.log(accountaddress)
            ballotContract = new web3.eth.Contract(ballotABI);
            ballotByteCode = '0x608060405260008055600060015560006002553480156200001f57600080fd5b506040516200183e3803806200183e8339818101604052810190620000459190620002c6565b33600360016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160046000600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550805160008190555060005b8151811015620001b357600560405180604001604052808484815181106200014c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200160008152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508080620001aa90620003ad565b915050620000fb565b506000600360006101000a81548160ff0219169083600281111562000201577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055505062000484565b6000620002246200021e8462000334565b6200030b565b905080838252602082019050828560208602820111156200024457600080fd5b60005b858110156200027857816200025d8882620002af565b84526020840193506020830192505060018101905062000247565b5050509392505050565b600082601f8301126200029457600080fd5b8151620002a68482602086016200020d565b91505092915050565b600081519050620002c0816200046a565b92915050565b600060208284031215620002d957600080fd5b600082015167ffffffffffffffff811115620002f457600080fd5b620003028482850162000282565b91505092915050565b6000620003176200032a565b905062000325828262000377565b919050565b6000604051905090565b600067ffffffffffffffff8211156200035257620003516200042a565b5b602082029050602081019050919050565b6000819050919050565b6000819050919050565b620003828262000459565b810181811067ffffffffffffffff82111715620003a457620003a36200042a565b5b80604052505050565b6000620003ba826200036d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620003f057620003ef620003fb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620004758162000363565b81146200048157600080fd5b50565b6113aa80620004946000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636332abc91161008c578063b922394611610066578063b9223946146101f1578063c19d93fb146101fb578063e2ba53f014610219578063f1cea4c714610237576100cf565b80636332abc9146101855780639e7b8d61146101a3578063a3ec138d146101bf576100cf565b80630121b93f146100d4578063013cf08b146100f05780631812dab4146101215780632e4176cf1461013f5780634c0a6af01461015d578063609ff1bd14610167575b600080fd5b6100ee60048036038101906100e99190610dbf565b610255565b005b61010a60048036038101906101059190610dbf565b61049f565b604051610118929190610f3b565b60405180910390f35b6101296104d3565b604051610136919061103f565b60405180910390f35b6101476104d9565b6040516101549190610f05565b60405180910390f35b6101656104ff565b005b61016f61069c565b60405161017c919061103f565b60405180910390f35b61018d6107fa565b60405161019a919061103f565b60405180910390f35b6101bd60048036038101906101b89190610d96565b610800565b005b6101d960048036038101906101d49190610d96565b610a97565b6040516101e89392919061105a565b60405180910390f35b6101f9610ace565b005b610203610c6b565b6040516102109190610f64565b60405180910390f35b610221610c7e565b60405161022e9190610f20565b60405180910390f35b61023f610d66565b60405161024c919061103f565b60405180910390f35b6001806002811115610290577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600360009054906101000a900460ff1660028111156102d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146102e257600080fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154141561036d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036490610f7f565b60405180910390fd5b8060010160009054906101000a900460ff16156103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b690610fbf565b60405180910390fd5b60018160010160006101000a81548160ff021916908315150217905550828160020181905550600260008154809291906103f89061116f565b919050555080600001546005848154811061043c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060020201600101600082825461045c91906110a2565b925050819055507f55c65cf9526efdf6c2252fe9757889dbd93e10172cad0f2edb1df619c88dbf7d336040516104929190610f05565b60405180910390a1505050565b600581815481106104af57600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b60005481565b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600281111561053a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600360009054906101000a900460ff166002811115610582577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461058c57600080fd5b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461061c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106139061101f565b60405180910390fd5b6001600360006101000a81548160ff02191690836002811115610668577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055507fd0dc01800a369fef30d3fced5275b8b916549867622e79efca5245c479fda4ea60405160405180910390a150565b600060028060028111156106d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600360009054906101000a900460ff166002811115610721577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461072b57600080fd5b6000805b6005805490508110156107f4578160058281548110610777577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016001015411156107e157600581815481106107c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016001015491508093505b80806107ec9061116f565b91505061072f565b50505090565b60015481565b600080600281111561083b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600360009054906101000a900460ff166002811115610883577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461088d57600080fd5b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461091d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091490610fdf565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16156109ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a490610fff565b60405180910390fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154146109fc57600080fd5b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060016000815480929190610a579061116f565b91905055507fb9e5f9042e6c6eb94817f660cfa81afea9585e59d72bfc3348a2305cbd33e13382604051610a8b9190610f05565b60405180910390a15050565b60046020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060020154905083565b6001806002811115610b09577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600360009054906101000a900460ff166002811115610b51577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610b5b57600080fd5b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610beb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be290610f9f565b60405180910390fd5b6002600360006101000a81548160ff02191690836002811115610c37577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055507f0deeca6c5a4a24936ed5053feb119562545a36119b158ecd0bb902a689be2d6660405160405180910390a150565b600360009054906101000a900460ff1681565b60006002806002811115610cbb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600360009054906101000a900460ff166002811115610d03577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610d0d57600080fd5b6005610d1761069c565b81548110610d4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016000015491505090565b60025481565b600081359050610d7b81611346565b92915050565b600081359050610d908161135d565b92915050565b600060208284031215610da857600080fd5b6000610db684828501610d6c565b91505092915050565b600060208284031215610dd157600080fd5b6000610ddf84828501610d81565b91505092915050565b610df1816110f8565b82525050565b610e008161110a565b82525050565b610e0f81611116565b82525050565b610e1e8161115d565b82525050565b6000610e31601483611091565b9150610e3c82611216565b602082019050919050565b6000610e54601e83611091565b9150610e5f8261123f565b602082019050919050565b6000610e77600e83611091565b9150610e8282611268565b602082019050919050565b6000610e9a602883611091565b9150610ea582611291565b604082019050919050565b6000610ebd601883611091565b9150610ec8826112e0565b602082019050919050565b6000610ee0602083611091565b9150610eeb82611309565b602082019050919050565b610eff81611153565b82525050565b6000602082019050610f1a6000830184610de8565b92915050565b6000602082019050610f356000830184610e06565b92915050565b6000604082019050610f506000830185610e06565b610f5d6020830184610ef6565b9392505050565b6000602082019050610f796000830184610e15565b92915050565b60006020820190508181036000830152610f9881610e24565b9050919050565b60006020820190508181036000830152610fb881610e47565b9050919050565b60006020820190508181036000830152610fd881610e6a565b9050919050565b60006020820190508181036000830152610ff881610e8d565b9050919050565b6000602082019050818103600083015261101881610eb0565b9050919050565b6000602082019050818103600083015261103881610ed3565b9050919050565b60006020820190506110546000830184610ef6565b92915050565b600060608201905061106f6000830186610ef6565b61107c6020830185610df7565b6110896040830184610ef6565b949350505050565b600082825260208201905092915050565b60006110ad82611153565b91506110b883611153565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110ed576110ec6111b8565b5b828201905092915050565b600061110382611133565b9050919050565b60008115159050919050565b6000819050919050565b600081905061112e82611332565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061116882611120565b9050919050565b600061117a82611153565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111ad576111ac6111b8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f486173206e6f20726967687420746f20766f7465000000000000000000000000600082015250565b7f4f6e6c79206368616972706572736f6e2063616e20656e6420766f74652e0000600082015250565b7f416c726561647920766f7465642e000000000000000000000000000000000000600082015250565b7f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008201527f746f20766f74652e000000000000000000000000000000000000000000000000602082015250565b7f54686520766f74657220616c726561647920766f7465642e0000000000000000600082015250565b7f4f6e6c79206368616972706572736f6e2063616e20737461727420766f74652e600082015250565b60038110611343576113426111e7565b5b50565b61134f816110f8565b811461135a57600080fd5b50565b61136681611153565b811461137157600080fd5b5056fea2646970667358221220fce9574773c094fdc8c8f8b5ebe716f1344f41bcee8bb5970f2081d70783ca9f64736f6c63430008040033';
            //'0x6080604052600080556000600155600060025560006003553480156200002457600080fd5b506040516200113338038062001133833981018060405260408110156200004a57600080fd5b8101908080516401000000008111156200006357600080fd5b828101905060208101848111156200007a57600080fd5b81518560018202830111640100000000821117156200009857600080fd5b50509291906020018051640100000000811115620000b557600080fd5b82810190506020810184811115620000cc57600080fd5b8151856001820283011164010000000082111715620000ea57600080fd5b505092919050505033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600590805190602001906200014b92919062000192565b5080600690805190602001906200016492919062000192565b506000600960006101000a81548160ff021916908360028111156200018557fe5b0217905550505062000241565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d557805160ff191683800117855562000206565b8280016001018555821562000206579182015b8281111562000205578251825591602001919060010190620001e8565b5b50905062000215919062000219565b5090565b6200023e91905b808211156200023a57600081600090555060010162000220565b5090565b90565b610ee280620002516000396000f3fe6080604052600436106100b4576000357c0100000000000000000000000000000000000000000000000000000000900480634c0a6af0146100b95780636332abc9146100d0578063753ec103146100fb57806387caea781461018b57806390949747146101e0578063af15408714610237578063b92239461461030c578063c19d93fb14610323578063d9e95a981461035c578063de975d1814610444578063f1cea4c7146104d4578063f3a8286f146104ff575b600080fd5b3480156100c557600080fd5b506100ce61052a565b005b3480156100dc57600080fd5b506100e561060e565b6040518082815260200191505060405180910390f35b34801561010757600080fd5b50610110610614565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610150578082015181840152602081019050610135565b50505050905090810190601f16801561017d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019757600080fd5b506101c6600480360360208110156101ae57600080fd5b810190808035151590602001909291905050506106b2565b604051808215151515815260200191505060405180910390f35b3480156101ec57600080fd5b506101f561096f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024357600080fd5b506102866004803603602081101561025a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610995565b604051808060200183151515158152602001828103825284818151815260200191508051906020019080838360005b838110156102d05780820151818401526020810190506102b5565b50505050905090810190601f1680156102fd5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561031857600080fd5b50610321610a5e565b005b34801561032f57600080fd5b50610338610b58565b6040518082600281111561034857fe5b60ff16815260200191505060405180910390f35b34801561036857600080fd5b506104426004803603604081101561037f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156103bc57600080fd5b8201836020820111156103ce57600080fd5b803590602001918460018302840111640100000000831117156103f057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610b6b565b005b34801561045057600080fd5b50610459610d19565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561049957808201518184015260208101905061047e565b50505050905090810190601f1680156104c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104e057600080fd5b506104e9610db7565b6040518082815260200191505060405180910390f35b34801561050b57600080fd5b50610514610dbd565b6040518082815260200191505060405180910390f35b600080600281111561053857fe5b600960009054906101000a900460ff16600281111561055357fe5b14151561055f57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105bb57600080fd5b6001600960006101000a81548160ff021916908360028111156105da57fe5b02179055507fd0dc01800a369fef30d3fced5275b8b916549867622e79efca5245c479fda4ea60405160405180910390a150565b60025481565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106aa5780601f1061067f576101008083540402835291602001916106aa565b820191906000526020600020905b81548152906001019060200180831161068d57829003601f168201915b505050505081565b600060018060028111156106c257fe5b600960009054906101000a900460ff1660028111156106dd57fe5b1415156106e957600080fd5b60008090506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805460018160011615610100020316600290049050141580156107a25750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16155b15610902576001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff02191690831515021790555061080a610dc3565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084816020019015159081151581525050841561086a5760008081548092919060010191905055505b8060076000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690831515021790555090505060036000815480929190600101919050555060019150505b7f55c65cf9526efdf6c2252fe9757889dbd93e10172cad0f2edb1df619c88dbf7d33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a18092505050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6008602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a415780601f10610a1657610100808354040283529160200191610a41565b820191906000526020600020905b815481529060010190602001808311610a2457829003601f168201915b5050505050908060010160009054906101000a900460ff16905082565b6001806002811115610a6c57fe5b600960009054906101000a900460ff166002811115610a8757fe5b141515610a9357600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aef57600080fd5b6002600960006101000a81548160ff02191690836002811115610b0e57fe5b02179055506000546001819055507fb43a401dcdbe02a8afa41feb6c651425997908d1a4b79cf505188ba1dd3fd8726001546040518082815260200191505060405180910390a150565b600960009054906101000a900460ff1681565b6000806002811115610b7957fe5b600960009054906101000a900460ff166002811115610b9457fe5b141515610ba057600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bfc57600080fd5b610c04610df5565b828160000181905250600081602001901515908115158152505080600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190610c7a929190610e11565b5060208201518160010160006101000a81548160ff0219169083151502179055509050506002600081548092919060010191905055507fb9e5f9042e6c6eb94817f660cfa81afea9585e59d72bfc3348a2305cbd33e13384604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150505050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610daf5780601f10610d8457610100808354040283529160200191610daf565b820191906000526020600020905b815481529060010190602001808311610d9257829003601f168201915b505050505081565b60035481565b60015481565b6040805190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b6040805190810160405280606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610e5257805160ff1916838001178555610e80565b82800160010185558215610e80579182015b82811115610e7f578251825591602001919060010190610e64565b5b509050610e8d9190610e91565b5090565b610eb391905b80821115610eaf576000816000905550600101610e97565b5090565b9056fea165627a7a72305820f5c9049e763e64ee845c6057f6f7a3e2ef7ea7d733c031532141a0fdb149c2a80029';
            
        } catch (error) {
            // User denied account access...
            window.alert("Please connect to Metamask.")
        }
    }
    // Legacy dapp browsers...
    else if (window.web3) {
            window.web3 = new Web3(web3.currentProvider);
            // Acccounts always exposed
            web3.eth.sendTransaction({/* ... */});
    }
    // Non-dapp browsers...
    else {
            console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
    }
});

function getContract(_ballotContractAddress){
    Ballot = new web3.eth.Contract(ballotABI, _ballotContractAddress);
    Ballot.methods.proposals(0).call().then((result) => {
        var str = web3.utils.toAscii(result[0]);
        $("#lbl_officialname").html("<b>Candidate Name: </b>" + str);
    });
    Ballot.methods.proposals(1).call().then((result) => {
        var str = web3.utils.toAscii(result[0]);
        $("#lbl_officialname1").html("<b>Candidate Name: </b>" + str);
    });    
    Ballot.methods.proposals(2).call().then((result) => {
        var str = web3.utils.toAscii(result[0]);
        $("#lbl_officialname2").html("<b>Candidate Name: </b>" + str);
    });
    
    loadFinalResult(Ballot);
    loadState(Ballot);
    
    watchVoteStarted(); //start watching for events
    watchVoteEnd(); //start watching for vote end
    watchVoteDone(); //start watching for vote done
    
    $('#panels_contract').show();
    $("#loader").hide();
    $("#panels_vote").hide();

}

//-------------- Watching Section -------------------//

function watchVoteEnd(){
    Ballot.events.voteEnded({
    }, (error, event) => { 
        console.log(event.returnValues.finalResult);
        loadState(Ballot);
        loadFinalResult(Ballot);
    })
    .on('data', (event) => {

    })
    .on('changed', (event) => {
        // remove event from local database
    })
    .on('error', console.error)                      
}

function watchVoteStarted(){
    Ballot.events.voteStarted({
    }, (error, event) => { })
    .on('data', (event) => {
        console.log(event.event); // same results as the optional callback above
        loadState(Ballot);
    })
    .on('changed', (event) => {
        // remove event from local database
    })
    .on('error', console.error)
}

function watchVoteDone(){
    Ballot.events.voteDone({
    }, (error, event) => { 
        var strEventAddress = event.returnValues.voter.toString().toLowerCase();
        var strAccountAddress = accountaddress.toString().toLowerCase();
        
        console.log(strEventAddress);
        console.log(strAccountAddress);
        console.log(strEventAddress.valueOf() == strAccountAddress.valueOf())
        
        if (strEventAddress.valueOf() == strAccountAddress.valueOf()) {
            console.log("yes");
            $("#loaderChoice").hide();
            loadState(Ballot);
            console.log("b");   
        }
    })
    .on('data', (event) => {

    })
    .on('changed', (event) => {
        // remove event from local database
    })
    .on('error', console.error)           
}

//-------------- Loading Section -------------------//

async function loadFinalResult(myBallot){
    console.log("loadFinalResult çalıştı")
    myBallot.methods.winnerName().call().then((result) => {
        var str = web3.utils.toAscii(result);
        $("#lbl_result").html("<b>Result: </b>" + str);
    });
}

async function loadState(myBallot){
    myBallot.methods.state().call().then((result) => {
        if (result == 0){
            $("#lbl_state").addClass("label label-primary");
            $("#lbl_state").html("Created"); 
        }
        else if (result == 1){
            $("#lbl_state").addClass("label label-success");
            $("#lbl_state").html("Voting"); 
        }                
        else if (result == 2){
            $("#lbl_state").addClass("label label-danger");
            $("#lbl_state").html("Ended");                    
        } 
        loadVoter(myBallot, accountaddress, result);
        return result;
    });
}

async function loadVoter(myBallot, _myVoterAddress, _state){
    myBallot.methods.voters(_myVoterAddress).call().then((result) => {
            console.log(_myVoterAddress)
            console.log(result.voted);
            if (result.voted){
                $("#panels_vote").hide();
                $("#lblVoted").html("<span class='label label-primary'>Voted</span>");
            }
            else {
                $("#panels_vote").show();                       
            }

    } );

}

//-------------- Button Section -------------------//

$("#btnVote").click(async function(){
    $("#loaderChoice").show();
    
    console.log($("#candidateIndex").val())
    var candidateIndex = $("#candidateIndex").val();
    //estimate first
    var mygas;
        Ballot.methods.vote(candidateIndex).estimateGas({from: accountaddress})
    .then(function(gasAmount){
        mygas = gasAmount;
    })
    
    Ballot.methods.vote(candidateIndex).send({
        from: accountaddress,
        gas: mygas, 
        gasPrice: web3.eth.gasPrice      	    
    })
    .on('transactionHash', (hash) => {
        console.log("a");
    })
    .on('receipt', (receipt) => {
        console.log("done");
    })
    .on('confirmation', (confirmationNumber, receipt) => {
        console.log("c");
    })
    .on('error', console.error);
});

$("#btnGo").click(async function() {	
    $("#loader").show();
    var i = 0;
    var _ballotAddress = $("#txtBallotAddress").val();
    getContract(_ballotAddress);
});